// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authentication/v1alpha2/authenticator.proto

package v1alpha2

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// PrincipalOutput defines which principal (`source.principal` or `request.auth.principal`)
// that the authenticator will set if succeeds.
type Authenticator_PrincipalOutput int32

const (
	// Sentinel value to make sure the principal type must be set.
	Authenticator_UNSPECIFIED Authenticator_PrincipalOutput = 0
	// Does not set any principal attributes. Use this if you want the authenticator validating
	// extra credentials without changing the principal outputs.
	Authenticator_VALIDATE_ONLY Authenticator_PrincipalOutput = 1
	// Output principal to `source.principal`
	Authenticator_SOURCE_PRINCIPAL Authenticator_PrincipalOutput = 2
	// Output principal to `request.auth.principal`
	Authenticator_REQUEST_AUTH_PRINCIPAL Authenticator_PrincipalOutput = 3
)

var Authenticator_PrincipalOutput_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "VALIDATE_ONLY",
	2: "SOURCE_PRINCIPAL",
	3: "REQUEST_AUTH_PRINCIPAL",
}

var Authenticator_PrincipalOutput_value = map[string]int32{
	"UNSPECIFIED":            0,
	"VALIDATE_ONLY":          1,
	"SOURCE_PRINCIPAL":       2,
	"REQUEST_AUTH_PRINCIPAL": 3,
}

func (x Authenticator_PrincipalOutput) String() string {
	return proto.EnumName(Authenticator_PrincipalOutput_name, int32(x))
}

func (Authenticator_PrincipalOutput) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd7d6b963d764225, []int{0, 0}
}

// $hide_from_docs
// Authenticator describes the type and parameters needed for that authenticator.
// Each authenticator can be defined in a separate CR (of `authenticator` kind)
// and referred in the authentication policy by name, or defined inline in the
// policy. Name of the authenticator CR must have prefix indicating the type
// (e.g `mtls`, `jwt` etc).
// Istio will also provide several stock authenticators, such as `mtls-strict`
//  and `mtls-permissive` (these will be reserved name)
// This example below illustrates the spec for `mtls-strict` authenticator:
//
// ```
// apiVersion: authentication.istio.io/v1alpha2
// kind: Authenticator
// metadata
//   name: mtls-strict
//   namespace: istio-system
// spec:
//   mtls:
//     mode: STRICT
//   principal: SOURCE_PRINCIPAL
// ```
//
// Here is another example for JWT authenticator.
//
// ```
// apiVersion: authentication.istio.io/v1alpha2
// kind: Authenticator
// metadata
//   name: jwt-my-example
//   namespace: foo
// spec:
//   jwt:
//     issuer: secret@exmaple.com
//     audiences:
//     - bar
//     - baz
//   principal: REQUEST_AUTH_PRINCIPAL
// ```
type Authenticator struct {
	// Types that are valid to be assigned to Type:
	//	*Authenticator_Mtls
	//	*Authenticator_Jwt
	Type isAuthenticator_Type `protobuf_oneof:"type"`
	// Defines the principal type that the authenticator will set if succeeds.
	Principal            Authenticator_PrincipalOutput `protobuf:"varint,3,opt,name=principal,proto3,enum=istio.authentication.v1alpha2.Authenticator_PrincipalOutput" json:"principal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Authenticator) Reset()         { *m = Authenticator{} }
func (m *Authenticator) String() string { return proto.CompactTextString(m) }
func (*Authenticator) ProtoMessage()    {}
func (*Authenticator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd7d6b963d764225, []int{0}
}
func (m *Authenticator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authenticator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authenticator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Authenticator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authenticator.Merge(m, src)
}
func (m *Authenticator) XXX_Size() int {
	return m.Size()
}
func (m *Authenticator) XXX_DiscardUnknown() {
	xxx_messageInfo_Authenticator.DiscardUnknown(m)
}

var xxx_messageInfo_Authenticator proto.InternalMessageInfo

type isAuthenticator_Type interface {
	isAuthenticator_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Authenticator_Mtls struct {
	Mtls *MutualTls `protobuf:"bytes,1,opt,name=mtls,proto3,oneof"`
}
type Authenticator_Jwt struct {
	Jwt *Jwt `protobuf:"bytes,2,opt,name=jwt,proto3,oneof"`
}

func (*Authenticator_Mtls) isAuthenticator_Type() {}
func (*Authenticator_Jwt) isAuthenticator_Type()  {}

func (m *Authenticator) GetType() isAuthenticator_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Authenticator) GetMtls() *MutualTls {
	if x, ok := m.GetType().(*Authenticator_Mtls); ok {
		return x.Mtls
	}
	return nil
}

func (m *Authenticator) GetJwt() *Jwt {
	if x, ok := m.GetType().(*Authenticator_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (m *Authenticator) GetPrincipal() Authenticator_PrincipalOutput {
	if m != nil {
		return m.Principal
	}
	return Authenticator_UNSPECIFIED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Authenticator) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Authenticator_OneofMarshaler, _Authenticator_OneofUnmarshaler, _Authenticator_OneofSizer, []interface{}{
		(*Authenticator_Mtls)(nil),
		(*Authenticator_Jwt)(nil),
	}
}

func _Authenticator_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Authenticator)
	// type
	switch x := m.Type.(type) {
	case *Authenticator_Mtls:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mtls); err != nil {
			return err
		}
	case *Authenticator_Jwt:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jwt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Authenticator.Type has unexpected type %T", x)
	}
	return nil
}

func _Authenticator_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Authenticator)
	switch tag {
	case 1: // type.mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MutualTls)
		err := b.DecodeMessage(msg)
		m.Type = &Authenticator_Mtls{msg}
		return true, err
	case 2: // type.jwt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Jwt)
		err := b.DecodeMessage(msg)
		m.Type = &Authenticator_Jwt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Authenticator_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Authenticator)
	// type
	switch x := m.Type.(type) {
	case *Authenticator_Mtls:
		s := proto.Size(x.Mtls)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Authenticator_Jwt:
		s := proto.Size(x.Jwt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("istio.authentication.v1alpha2.Authenticator_PrincipalOutput", Authenticator_PrincipalOutput_name, Authenticator_PrincipalOutput_value)
	proto.RegisterType((*Authenticator)(nil), "istio.authentication.v1alpha2.Authenticator")
}

func init() {
	proto.RegisterFile("authentication/v1alpha2/authenticator.proto", fileDescriptor_bd7d6b963d764225)
}

var fileDescriptor_bd7d6b963d764225 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x2c, 0x2d, 0xc9,
	0x48, 0xcd, 0x2b, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x33, 0x4c, 0xcc, 0x29,
	0xc8, 0x48, 0x34, 0xd2, 0x47, 0x12, 0xcf, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92,
	0xcd, 0x2c, 0x2e, 0xc9, 0xcc, 0xd7, 0x43, 0xd5, 0xa2, 0x07, 0xd3, 0x22, 0xa5, 0x89, 0xcb, 0xac,
	0xdc, 0x92, 0x9c, 0xe2, 0xf8, 0xdc, 0xd4, 0x92, 0x8c, 0xfc, 0x14, 0x88, 0x49, 0x52, 0x1a, 0xb8,
	0x94, 0x66, 0x95, 0x97, 0xa0, 0xa8, 0x54, 0xba, 0xc2, 0xc4, 0xc5, 0xeb, 0x88, 0xec, 0x16, 0x21,
	0x3b, 0x2e, 0x16, 0x90, 0x81, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x1a, 0x7a, 0x78, 0x1d,
	0xa5, 0xe7, 0x5b, 0x5a, 0x52, 0x9a, 0x98, 0x13, 0x92, 0x53, 0xec, 0xc1, 0x10, 0x04, 0xd6, 0x27,
	0x64, 0xc6, 0xc5, 0x9c, 0x55, 0x5e, 0x22, 0xc1, 0x04, 0xd6, 0xae, 0x44, 0x40, 0xbb, 0x57, 0x79,
	0x89, 0x07, 0x43, 0x10, 0x48, 0x83, 0x50, 0x14, 0x17, 0x67, 0x41, 0x51, 0x66, 0x5e, 0x72, 0x66,
	0x41, 0x62, 0x8e, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x0d, 0x01, 0xdd, 0x28, 0x0e, 0xd7,
	0x0b, 0x80, 0xe9, 0xf6, 0x2f, 0x2d, 0x29, 0x28, 0x2d, 0x09, 0x42, 0x18, 0xa7, 0x94, 0xce, 0xc5,
	0x8f, 0x26, 0x2b, 0xc4, 0xcf, 0xc5, 0x1d, 0xea, 0x17, 0x1c, 0xe0, 0xea, 0xec, 0xe9, 0xe6, 0xe9,
	0xea, 0x22, 0xc0, 0x20, 0x24, 0xc8, 0xc5, 0x1b, 0xe6, 0xe8, 0xe3, 0xe9, 0xe2, 0x18, 0xe2, 0x1a,
	0xef, 0xef, 0xe7, 0x13, 0x29, 0xc0, 0x28, 0x24, 0xc2, 0x25, 0x10, 0xec, 0x1f, 0x1a, 0xe4, 0xec,
	0x1a, 0x1f, 0x10, 0xe4, 0xe9, 0xe7, 0xec, 0x19, 0xe0, 0xe8, 0x23, 0xc0, 0x24, 0x24, 0xc5, 0x25,
	0x16, 0xe4, 0x1a, 0x18, 0xea, 0x1a, 0x1c, 0x12, 0xef, 0x18, 0x1a, 0xe2, 0x81, 0x24, 0xc7, 0xec,
	0xc4, 0xc6, 0xc5, 0x52, 0x52, 0x59, 0x90, 0xea, 0x64, 0x74, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x46, 0xa9, 0x40, 0xbc, 0x91, 0x99, 0xaf, 0x9f, 0x58, 0x90,
	0xa9, 0x8f, 0x23, 0x6e, 0x92, 0xd8, 0xc0, 0x31, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x50,
	0xb2, 0xed, 0xc2, 0x34, 0x02, 0x00, 0x00,
}

func (m *Authenticator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authenticator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn1, err1 := m.Type.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	if m.Principal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthenticator(dAtA, i, uint64(m.Principal))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Authenticator_Mtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Mtls != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthenticator(dAtA, i, uint64(m.Mtls.Size()))
		n2, err2 := m.Mtls.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}
func (m *Authenticator_Jwt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Jwt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthenticator(dAtA, i, uint64(m.Jwt.Size()))
		n3, err3 := m.Jwt.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func encodeVarintAuthenticator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Authenticator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	if m.Principal != 0 {
		n += 1 + sovAuthenticator(uint64(m.Principal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Authenticator_Mtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mtls != nil {
		l = m.Mtls.Size()
		n += 1 + l + sovAuthenticator(uint64(l))
	}
	return n
}
func (m *Authenticator_Jwt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jwt != nil {
		l = m.Jwt.Size()
		n += 1 + l + sovAuthenticator(uint64(l))
	}
	return n
}

func sovAuthenticator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthenticator(x uint64) (n int) {
	return sovAuthenticator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Authenticator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthenticator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authenticator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authenticator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthenticator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthenticator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthenticator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutualTls{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Authenticator_Mtls{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthenticator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthenticator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthenticator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Jwt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Authenticator_Jwt{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			m.Principal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthenticator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Principal |= Authenticator_PrincipalOutput(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthenticator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthenticator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthenticator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthenticator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthenticator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthenticator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthenticator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthenticator
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAuthenticator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthenticator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthenticator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAuthenticator
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthenticator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthenticator   = fmt.Errorf("proto: integer overflow")
)
